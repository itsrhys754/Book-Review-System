security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # API Firewall for JWT authentication
        api:
            pattern: ^/api
            stateless: true
            jwt: ~


        # Main Firewall for web authentication
        main:
            lazy: true
            provider: app_user_provider

            form_login:
                login_path: app_login
                check_path: app_login
                default_target_path: app_books

            logout:
                path: app_logout
                invalidate_session: true
                target: app_books

            # Specify the entry point for the form_login
            entry_point: form_login

    access_control:
        - { path: ^/admin, roles: [ROLE_ADMIN, ROLE_MODERATOR] }
        - { path: ^/books/new, roles: [ROLE_USER] }
        - { path: ^/review/new, roles: [ROLE_USER] }
        - { path: ^/api/doc, roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/reviews, roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/books, roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/users, roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/login, roles: [] }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY}




when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
