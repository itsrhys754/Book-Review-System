{% extends 'base.html.twig' %}

{% block title %}{{ book.title }}{% endblock %}

{% block body %}
    <div class="book-detail-container">
        <div class="book-header">
            <div class="book-image-container">
                {% if book.imageFilename %}
                    <img src="{{ asset('uploads/book_images/' ~ book.imageFilename) }}" alt="{{ book.title }}" class="book-image"/>
                {% else %}
                    <img src="{{ asset('uploads/book_images/default-book-image.png') }}" alt="Default cover" class="book-image"/>
                {% endif %}
            </div>
            
            <div class="book-info">
                <h1>{{ book.title }}</h1>
                <div class="book-meta">
                    <p class="author">By {{ book.author }}</p>
                    <p class="genre">{{ book.genre }}</p>
                    <p class="pages">{{ book.pages }} pages</p>
                </div>
                
                <div class="book-summary">
                    <h2>Summary</h2>
                    <p>{{ book.summary }}</p>
                </div>

                {% if is_granted('ROLE_USER') %}
                    {% set userReview = null %}
                    {% for review in book.reviews %}
                        {% if review.user == app.user %}
                            {% set userReview = review %}
                        {% endif %}
                    {% endfor %}
                    
                    {% if userReview %}
                        <div class="review-actions">
                            <button onclick="window.location.href='{{ path('app_review_edit', {id: userReview.id}) }}'" 
                                    class="btn btn-primary">
                                <i class="fas fa-edit me-1"></i> Edit
                            </button>
                        </div>
                    {% else %}
                        <button type="button" onclick="window.location.href='{{ path('app_review_new', { 'bookId': book.id }) }}'" class="btn btn-primary">Write a Review</button>
                    {% endif %}
                {% else %}
                    <button type="button" onclick="window.location.href='{{ path('app_login') }}'" class="btn btn-secondary">Login to Review</button>
                {% endif %}
            </div>
        </div>

        <div class="reviews-section">
            <div class="reviews-header">
                <div class="reviews-title-section">
                    <h2>Reader Reviews</h2>
                    
                    {# Calculate review statistics #}
                    {% set totalRating = 0 %}
                    {% set reviewCount = 0 %}
                    {% set hasReviewed = false %}
                    
                    {% for review in book.reviews %}
                        {% if review.approved %}
                            {% set totalRating = totalRating + review.rating %}
                            {% set reviewCount = reviewCount + 1 %}
                        {% endif %}
                        {% if is_granted('ROLE_USER') and review.user == app.user %}
                            {% set hasReviewed = true %}
                        {% endif %}
                    {% endfor %}

                    {% if reviewCount > 0 %}
                        <div class="rating-summary">
                            <div class="rating-stats">
                                <div class="average-rating">
                                    <span class="rating-number">{{ (totalRating / reviewCount)|number_format(1) }}</span>
                                    <div class="rating-details">
                                        <span class="rating-max">/10</span>
                                        <span class="rating-count">{{ reviewCount }} review{% if reviewCount != 1 %}s{% endif %}</span>
                                    </div>
                                </div>
                            </div>

                            <div class="review-filters">
                                <select id="review-sort" class="form-select">
                                    <option value="recent">Most Recent</option>
                                    <option value="highest">Highest Rated</option>
                                    <option value="lowest">Lowest Rated</option>
                                </select>
                            </div>
                        </div>
                    {% endif %}
                </div>
            </div>

            <div id="reviews-container" class="reviews-container">
                {# Reviews will be loaded here via JavaScript #}
                {% for review in book.reviews %}
                    {% if review.approved %}
                        <div class="review-card" data-review-id="{{ review.id }}">
                            <div class="review-card-header">
                                <div class="reviewer-profile">
                                    <div class="reviewer-avatar">{{ review.user.username|slice(0, 1) }}</div>
                                    <div class="reviewer-details">
                                        <span class="reviewer-name">
                                            <a href="/profile/{{ review.user.username }}">
                                                {{ review.user.username }}
                                            </a>
                                        </span>
                                        <span class="review-date">Reviewed on {{ review.createdAt|date('Y-m-d') }}</span>
                                    </div>
                                </div>
                                <div class="review-rating">
                                    <div class="rating-badge">
                                        <span class="rating-value">{{ review.rating }}</span>
                                        <span class="rating-max">/10</span>
                                    </div>
                                </div>
                            </div>
                            <div class="review-card-body">
                                <div class="review-content {% if review.containsSpoilers %}blurred{% endif %}">
                                    {{ review.content }}
                                </div>
                                {% if review.containsSpoilers %}
                                    <button class="unblur-btn" onclick="unblurReview(this)">Unblur Spoilers</button>
                                {% endif %}
                                <div class="review-votes">
                                    <button class="vote-btn upvote-btn" onclick="voteReview({{ review.id }}, 'upvote')">
                                        <i class="fas fa-thumbs-up"></i> ({{ review.getUpvotesCount() }})
                                    </button>
                                    <button class="vote-btn downvote-btn" onclick="voteReview({{ review.id }}, 'downvote')">
                                        <i class="fas fa-thumbs-down"></i> ({{ review.getDownvotesCount() }})
                                    </button>
                                </div>
                            </div>
                        </div>
                    {% endif %}
                {% endfor %}
            </div>

            {% if reviewCount == 0 %}
                <div class="no-reviews">
                    <div class="no-reviews-content">
                        <i class="fas fa-book-open"></i>
                        <h3>No Reviews Yet</h3>
                        <p>{% if is_granted('ROLE_USER') %}Be the first to share your thoughts on this book!{% else %}Login to be the first to review this book!{% endif %}</p>
                        {% if is_granted('ROLE_USER') and not hasReviewed %}
                            <button type="button" onclick="window.location.href='{{ path('app_review_new', { 'bookId': book.id }) }}'" class="btn btn-primary">Write a Review</button>
                        {% elseif not is_granted('ROLE_USER') %}
                            <button type="button" onclick="window.location.href='{{ path('app_login') }}'" class="btn btn-secondary">Login to Review</button>
                        {% endif %}
                    </div>
                </div>
            {% endif %}
        </div>

        {% if book.user == app.user %}
            <a href="{{ path('app_book_edit', {'id': book.id}) }}" class="btn btn-secondary">Edit Book</a>
        {% endif %}
    </div>

    {# JavaScript for handling voting and sorting reviews #}
    <script>
    // Function to unblur review content
    function unblurReview(button) {
        const reviewContent = button.previousElementSibling; // Get the review content
        reviewContent.classList.remove('blurred'); // Remove the blurred class
        button.style.display = 'none'; // Hide the unblur button
    }

    // Function to handle review voting
    function voteReview(reviewId, voteType) {
        fetch(`{{ path('app_review_vote', {id: 'REVIEW_ID'}) }}`.replace('REVIEW_ID', reviewId) + `?type=${voteType}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ reviewId: reviewId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.upvotes !== undefined && data.downvotes !== undefined) {
                // Update the vote counts in the UI
                const reviewCard = document.querySelector(`.review-card[data-review-id="${reviewId}"]`);
                reviewCard.querySelector('.upvote-btn').innerHTML = `<i class="fas fa-thumbs-up"></i> (${data.upvotes})`;
                reviewCard.querySelector('.downvote-btn').innerHTML = `<i class="fas fa-thumbs-down"></i> (${data.downvotes})`;
            } else if (data.error) {
                alert(data.error);  // Show an error if already voted
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }

    document.addEventListener('DOMContentLoaded', function() {
        const reviewsContainer = document.getElementById('reviews-container');
        const sortSelect = document.getElementById('review-sort');

        // Function to load reviews with sorting option
        function loadReviews(sort = 'recent') {
            fetch(`{{ path('app_book_reviews', {'id': book.id}) }}?sort=${sort}`)
                .then(response => response.json())
                .then(data => {
                    // Update the reviews container
                    reviewsContainer.innerHTML = data.reviews.map(review => `
                        <div class="review-card" data-review-id="${review.id}">
                            <div class="review-card-header">
                                <div class="reviewer-profile">
                                    <div class="reviewer-avatar">
                                        ${review.userInitial}
                                    </div>
                                    <div class="reviewer-details">
                                        <span class="reviewer-name">
                                            <a href="/profile/${review.username}">
                                                ${review.username}
                                            </a>
                                        </span>
                                        <span class="review-date">Reviewed on ${review.createdAt}</span>
                                    </div>
                                </div>
                                <div class="review-rating">
                                    <div class="rating-badge">
                                        <span class="rating-value">${review.rating}</span>
                                        <span class="rating-max">/10</span>
                                    </div>
                                </div>
                            </div>
                            <div class="review-card-body">
                                <div class="review-content ${review.containsSpoilers ? 'blurred' : ''}">
                                    ${review.content}
                                </div>
                                ${review.containsSpoilers ? '<button class="unblur-btn" onclick="unblurReview(this)">Unblur Spoilers</button>' : ''}
                                <div class="review-votes">
                                    <button class="vote-btn upvote-btn" onclick="voteReview(${review.id}, 'upvote')">
                                        <i class="fas fa-thumbs-up"></i> (${review.upvotes})
                                    </button>
                                    <button class="vote-btn downvote-btn" onclick="voteReview(${review.id}, 'downvote')">
                                        <i class="fas fa-thumbs-down"></i> (${review.downvotes})
                                    </button>
                                </div>
                            </div>
                        </div>
                    `).join('');
                    
                    // Reattach event listeners for upvotes and downvotes (if any)
                    attachVoteEventListeners();
                });
        }

        // Attach event listeners for voting actions
        function attachVoteEventListeners() {
            const upvoteButtons = document.querySelectorAll('.upvote-btn');
            const downvoteButtons = document.querySelectorAll('.downvote-btn');

            upvoteButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const reviewId = this.closest('.review-card').getAttribute('data-review-id');
                    voteReview(reviewId, 'upvote');
                });
            });

            downvoteButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const reviewId = this.closest('.review-card').getAttribute('data-review-id');
                    voteReview(reviewId, 'downvote');
                });
            });
        }

        // Initial load of reviews
        loadReviews();

        // Handle sort changes
        sortSelect.addEventListener('change', function() {
            loadReviews(this.value);
        });
    });
    </script>

{% endblock %}
